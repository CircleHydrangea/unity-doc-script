アセットを含むオブジェクトにアクセスすることができます。
In the editor, Resources.FindObjectsOfTypeAll can be used to locate assets and scene objects.

「Resources」という名前のフォルダ内にあるすべてのアセットは、Resources.Load関数を介してアクセスすることができます。
Multiple "Resources" folders may exist and when loading objects each will be examined.

このクラスは、アセットにアクセスするときパス名を指定しないで、代わりにメンバ変数を宣言することによってアセットの参照を可能にし、インスペクターでそれを割り当てています。
この方法を使えば、アセットの容量の計算ができ、同じオブジェクトを生成しないので、ゲームサイズを最小限に抑えることができるようになります。
When you place assets in "Resources" folders this can not be done, thus all assets in the "Resources" folders will be included in a build.

パス名で利用する欠点として、スクリプトが直接アセットの場所など必要な情報を持つと、他のスクリプトで使用する際、再利用できず同じものを生成してしまうということです。その一方で、インスペクターに情報が表示され、設定がしやすいという利点もあるので、場合によって使い分けるようにします。

However there are situations where it is more convenient to fetch an asset by its name instead of linking to it in the inspector.
Essentially whenever it is inconvenient to assign the reference to the object in the inspector.
For example you might want to create a game object procedurally from a script and for example assign a texture to a procedurally generated mesh.

Some loaded assets, most notably textures, can use up memory even when no instance exists in the scene. To reclaim this memory when the asset is no longer needed, you can use Resources.UnloadUnusedAssets.
BEGIN EX
var go = new GameObject.CreatePrimitive(PrimitiveType.Plane);
go.renderer.material.mainTexture = Resources.Load("glass");
END EX