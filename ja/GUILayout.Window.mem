<signature>
Window(int,Rect,WindowFunction,string,GUILayoutOption[])
Window(int,Rect,WindowFunction,Texture,GUILayoutOption[])
Window(int,Rect,WindowFunction,GUIContent,GUILayoutOption[])
Window(int,Rect,WindowFunction,string,GUIStyle,GUILayoutOption[])
Window(int,Rect,WindowFunction,Texture,GUIStyle,GUILayoutOption[])
Window(int,Rect,WindowFunction,GUIContent,GUIStyle,GUILayoutOption[])
</signature>
ウィンドウを作成します。ウィンドウの中身はfunc 引数で指定したメソッドの中に記述します。
Windows float above normal GUI controls, feature click-to-focus and can optionally be dragged around by the end user.
Unlike other controls, you need to pass them a separate function for the GUI controls to put inside the window. Here is a small example to get you started:

{img GUILayoutWindow.png}\\
''Window in the Game View.''
CONVERTEXAMPLE
BEGIN EX
	var windowRect : Rect = Rect (20, 20, 120, 50);

	function OnGUI () {
		// Register the window. Notice the 3rd parameter 
		windowRect = GUILayout.Window (0, windowRect, DoMyWindow, "My Window");
	}

	// Make the contents of the window
	function DoMyWindow (windowID : int) {
		// This button will size to fit the window
		if (GUILayout.Button ("Hello World"))
			print ("Got a click");
	}
END EX
The screen rectangle you pass in to the function only acts as a guide. To Apply extra limits to the window, pass in some extra layout options. The ones applied here will override the size calculated. Here is a small example:
CONVERTEXAMPLE
BEGIN EX
	var windowRect : Rect = Rect (20, 20, 120, 50);

	function OnGUI () {
		// Register the window. Here we instruct the layout system to
		// make the window 100 pixels wide no matter what. 
		windowRect = GUILayout.Window (
			0, windowRect, DoMyWindow, "My Window", GUILayout.Width (100));
	}

	// Make the contents of the window
	function DoMyWindow (windowID : int) {
		// This button is too large to fit the window
		// Normally, the window would have been expanded to fit the button, but due to
		// the GUILayout.Width call above the window will only ever be 100 pixels wide 
		if (GUILayout.Button ("Please click me a lot"))
			print ("Got a click");
	}
END EX
@param id ウィンドウのID。このID でウィンドウを識別する
@param screenRect ウィンドウの位置
@param func 常に指定したメソッドが呼び出される。このメソッドには常に引数としてid が渡される
@param text 表示する文字列
@param image 表示する画像
@param content 表示する文字列、画像、ツールチップ
@param style スタイル
@param options 幅・高さ
@return The rectangle the window is at. This can be in a different position and have a different size than the one you passed in.